// Code generated by go-bindata. DO NOT EDIT.
// sources:
// faucet.html

package main

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _faucetHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x5a\x71\x93\xdb\xb6\x72\xff\xfb\xfc\x29\x36\xac\xfd\x24\xf5\x8e\xa4\xee\xce\xf6\xbb\x4a\xa4\x32\xf7\xfc\xf2\x52\x77\xda\x24\x4d\x9c\x69\xdf\xe4\x65\x3a\x20\xb1\x12\xe1\x03\x01\x06\x00\xa5\x53\x6e\xf4\xdd\x3b\x00\x48\x8a\x94\x74\x17\x3b\x76\x3b\xf1\x1f\x67\x12\x58\xec\x2e\x76\x7f\x8b\x5d\x2c\x95\x7c\xf1\xd7\x6f\xdf\xbc\xfb\xfb\x77\x5f\x41\x61\x4a\xbe\x78\x96\xd8\xff\x80\x13\xb1\x4a\x03\x14\xc1\xe2\xd9\x59\x52\x20\xa1\x8b\x67\x67\x67\x49\x89\x86\x40\x5e\x10\xa5\xd1\xa4\x41\x6d\x96\xe1\x4d\xb0\x9f\x28\x8c\xa9\x42\xfc\xa5\x66\xeb\x34\xf8\xef\xf0\xc7\xdb\xf0\x8d\x2c\x2b\x62\x58\xc6\x31\x80\x5c\x0a\x83\xc2\xa4\xc1\xdb\xaf\x52\xa4\x2b\xec\xad\x13\xa4\xc4\x34\x58\x33\xdc\x54\x52\x99\x1e\xe9\x86\x51\x53\xa4\x14\xd7\x2c\xc7\xd0\xbd\x5c\x00\x13\xcc\x30\xc2\x43\x9d\x13\x8e\xe9\x65\xb0\x78\x66\xf9\x18\x66\x38\x2e\x1e\x1e\xa2\x6f\xd0\x6c\xa4\xba\xdb\xed\x66\x70\x5b\x9b\x02\x85\x61\x39\x31\x48\xe1\x6f\xa4\xce\xd1\x24\xb1\xa7\x74\x8b\x38\x13\x77\x50\x28\x5c\xa6\x81\x55\x5d\xcf\xe2\x38\xa7\xe2\xbd\x8e\x72\x2e\x6b\xba\xe4\x44\x61\x94\xcb\x32\x26\xef\xc9\x7d\xcc\x59\xa6\x63\xb3\x61\xc6\xa0\x0a\x33\x29\x8d\x36\x8a\x54\xf1\x75\x74\x1d\xfd\x39\xce\xb5\x8e\xbb\xb1\xa8\x64\x22\xca\xb5\x0e\x40\x21\x4f\x03\x6d\xb6\x1c\x75\x81\x68\x02\x88\x17\xbf\x4f\xee\x52\x0a\x13\x92\x0d\x6a\x59\x62\xfc\x32\xfa\x73\x34\x75\x22\xfb\xc3\x4f\x4b\xb5\x62\x75\xae\x58\x65\x40\xab\xfc\x83\xe5\xbe\xff\xa5\x46\xb5\x8d\xaf\xa3\xcb\xe8\xb2\x79\x71\x72\xde\xeb\x60\x91\xc4\x9e\xe1\xe2\x93\x78\x87\x42\x9a\x6d\x7c\x15\xbd\x8c\x2e\xe3\x8a\xe4\x77\x64\x85\xb4\x95\x64\xa7\xa2\x76\xf0\xb3\xc9\x7d\xcc\x87\xef\x0f\x5d\xf8\x39\x84\x95\xb2\x44\x61\xa2\xf7\x3a\xbe\x8a\x2e\x6f\xa2\x69\x3b\x70\xcc\xdf\x09\xb0\x4e\xb3\xa2\xce\xa2\x35\x2a\x8b\x5c\x1e\xe6\x28\x0c\x2a\x78\xb0\xa3\x67\x25\x13\x61\x81\x6c\x55\x98\x19\x5c\x4e\xa7\x2f\xe6\xa7\x46\xd7\x85\x1f\xa6\x4c\x57\x9c\x6c\x67\xb0\xe4\x78\xef\x87\x08\x67\x2b\x11\x32\x83\xa5\x9e\x81\xe7\xec\x26\x76\x4e\x66\xa5\xe4\x4a\xa1\xd6\x8d\xb0\x4a\x6a\x66\x98\x14\x33\x8b\x28\x62\xd8\x1a\x4f\xd1\xea\x8a\x88\xa3\x05\x24\xd3\x92\xd7\x06\x0f\x14\xc9\xb8\xcc\xef\xfc\x98\x8b\xe6\xfe\x26\x72\xc9\xa5\x9a\xc1\xa6\x60\xcd\x32\x70\x82\xa0\x52\xd8\xb0\x87\x8a\x50\xca\xc4\x6a\x06\xaf\xab\x66\x3f\x50\x12\xb5\x62\x62\x06\xd3\xfd\x92\x24\x6e\xcd\x98\xc4\xfe\xe0\x7a\x76\x96\x64\x92\x6e\x9d\x0f\x29\x5b\x43\xce\x89\xd6\x69\x70\x60\x62\x77\x20\x0d\x08\xec\x39\x44\x98\x68\xa7\x06\x73\x4a\x6e\x02\x70\x82\xd2\xc0\x2b\x11\x66\xd2\x18\x59\xce\xe0\xd2\xaa\xd7\x2c\x39\xe0\xc7\x43\xbe\x0a\x2f\xaf\xda\xc9\xb3\xa4\xb8\x6c\x99\x18\xbc\x37\xa1\xf3\x4f\xe7\x99\x60\x91\xb0\x76\xed\x92\xc0\x92\x84\x19\x31\x45\x00\x44\x31\x12\x16\x8c\x52\x14\x69\x60\x54\x8d\x16\x47\x6c\x01\xfd\xe3\xef\x91\xd3\xaf\xb8\x6c\xf5\x8a\x29\x5b\x37\xdb\xea\x3d\x1e\xec\xf0\xf1\x4d\xdc\x40\xf3\x20\x97\x4b\x8d\x26\xec\xed\xa9\x47\xcc\x44\x55\x9b\x70\xa5\x64\x5d\x75\xf3\x67\x89\x1b\x05\x46\xd3\xa0\x56\x3c\x68\x8e\x7f\xf7\x68\xb6\x55\x63\x8a\xa0\xdb\xb8\x54\x65\x68\x3d\xa1\x24\x0f\xa0\xe2\x24\xc7\x42\x72\x8a\x2a\x0d\x7e\x90\x39\x23\x1c\x84\xdf\x33\xfc\xf8\xfd\xbf\x43\xe3\x32\x26\x56\xb0\x95\xb5\x82\xdb\x5f\x6a\xf2\xa6\x20\x4c\x00\xa1\xd4\xe2\x35\x8a\xa2\x9e\x26\x0e\xbc\xc7\xba\x86\x99\x11\x7b\xaa\xb3\x24\xab\x8d\x91\x1d\x61\x66\x04\x64\x46\x84\x14\x97\xa4\xe6\x06\xa8\x92\x15\x95\x1b\x11\x1a\xb9\x5a\xd9\x54\xe7\x77\xe1\x17\x05\x40\x89\x21\xcd\x54\x1a\xb4\xb4\xad\x13\x89\xae\x64\x55\x57\x8d\x1b\xfd\x20\xde\x57\x44\x50\xa4\xd6\xe9\x5c\x63\xb0\xf8\x9a\xad\x11\x4a\x84\xdb\xff\xfc\xf1\xf6\x8b\xb3\x43\x4c\xe4\x44\xa1\x09\xfb\x4c\x8f\x90\x91\xc4\x5e\x19\xbf\x25\x68\xfe\x25\x35\x6f\x39\x75\x5b\x28\x51\xd4\x30\x78\x0b\x95\x3d\x58\x82\xc5\xc3\x83\x22\x62\x85\xf0\x9c\xd1\xfb\x0b\x78\x4e\x4a\x59\x0b\x03\xb3\x14\xa2\x5b\xf7\xa8\x77\xbb\x01\x77\x80\x84\xb3\x45\x42\x9e\xc2\x37\x48\x91\x73\x96\xdf\xa5\x81\x61\xa8\xd2\x87\x07\xcb\x7c\xb7\x9b\xc3\xc3\x03\x5b\xc2\xf3\xe8\x7b\xcc\x49\x65\xf2\x82\xec\x76\x2b\xd5\x3e\x47\x78\x8f\x79\x6d\x70\x3c\x79\x78\x40\xae\x71\xb7\xd3\x75\x56\x32\x33\x6e\x97\xdb\x71\x41\x77\x3b\xab\x73\xa3\xe7\x6e\x07\xb1\x65\x2a\x28\xde\xc3\xf3\xe8\x3b\x54\x4c\x52\x0d\x9e\x3e\x89\xc9\x22\x89\x39\x5b\x34\xeb\x86\x46\x8a\x6b\xbe\xc7\x4b\x6c\x01\xd3\x01\xdd\xc5\x8d\x53\xb5\xaf\xe9\x89\x30\x58\x85\x9d\xf6\x0d\x1e\x34\x33\x78\x87\xdb\x34\x78\x78\xe8\xaf\x6d\x66\x73\xc2\x79\x46\xac\x5d\xfc\xd6\xba\x45\xbf\xa2\xc5\xe9\x9a\x69\x57\x53\x2d\x5a\x0d\xf6\x6a\x7f\x60\x5c\x1f\x9c\x5c\x46\x56\x33\xb8\xbe\xea\x1d\x5b\xa7\x42\xfe\xf5\x41\xc8\x5f\x9f\x24\xae\x88\x40\x0e\xee\x6f\xa8\x4b\xc2\xdb\xe7\x26\x5a\x7a\xc1\x77\xb8\x28\xb4\x87\x74\xa7\x5a\x77\xd8\x4f\xe7\x20\xd7\xa8\x96\x5c\x6e\x66\x40\x6a\x23\xe7\x50\x92\xfb\x2e\xe1\x5d\x4f\xa7\x7d\xbd\x6d\x2d\x48\x32\x8e\xee\x78\x51\xf8\x4b\x8d\xda\xe8\xee\x30\xf1\x53\xee\xaf\x3d\x53\x28\x0a\x8d\xf4\xc0\x1a\x56\xa2\x35\xad\xa3\xea\xb9\xbe\x33\xe6\x49\xdd\x97\x52\x76\x39\xa4\xaf\x46\xc3\xba\x97\xee\x82\x45\x62\xd4\x9e\xee\x2c\x31\xf4\xa3\x72\x80\xb2\x35\xde\x63\x29\xc0\x9f\x68\x76\xef\x15\xa2\xf2\x05\x86\x85\x2c\xb8\xd7\x24\x36\xf4\x13\x24\x5b\x10\x66\x44\xe3\x87\x88\x77\xa9\x7e\x2f\xde\xbd\x7e\xaa\xfc\x02\x89\x32\x19\x12\xf3\x21\x0a\x2c\x6b\x41\x7b\xfb\xb7\x89\xe0\xd3\x2d\x50\x0b\xb6\x46\xa5\x99\xd9\x7e\xa8\x0a\x48\xf7\x3a\xf8\xf7\xa1\x0a\x49\x6c\xd4\xd3\x60\xeb\xbf\x7c\xa6\xe8\xfe\xad\xa2\xe4\x7a\xf1\xaf\x72\x03\x54\xa2\x06\x53\x30\x0d\x36\xbd\x7e\x99\xc4\xc5\x75\x47\x52\x2d\xde\xd9\x09\x6f\x55\x58\xba\xea\x02\x98\x06\x55\x0b\x97\x7c\xa5\x00\x53\xe0\xb0\x22\x69\xf2\x74\x04\xef\xa4\xad\xea\xd6\x28\x0c\x94\x84\xb3\x9c\xc9\x5a\x03\xc9\x8d\x54\x1a\x96\x4a\x96\x80\xf7\x05\xa9\xb5\xb1\x8c\xec\x01\x42\xd6\x84\x71\x17\x4d\xce\xa9\x20\x15\x90\x3c\xaf\xcb\xda\x56\xa5\x62\x05\x28\x64\xbd\x2a\x5a\x65\x8c\x04\x9f\x9b\xb8\x14\xab\x4e\x21\x5d\x91\x12\x88\x31\x24\xbf\xd3\x17\xd0\x1e\x0c\x40\x14\x82\x61\x48\xed\xaa\x5c\x96\xa5\x14\x70\xad\x28\x54\x44\x99\x2d\xe8\x61\x7d\x41\xf2\xdc\x25\xba\x08\x6e\xc5\x56\x0a\x84\x82\xac\x9d\x8a\xf0\xce\x5f\x29\x2e\xe0\x6b\x29\x57\x1c\xcf\xad\x86\x7f\x23\x39\x66\x52\x76\xcb\xa0\x24\xdb\x56\x6e\xb3\x8f\x0d\x33\x05\xf3\x86\xaa\x50\x95\x96\x07\x05\xce\x4a\x66\x74\x94\xc4\xd5\xfe\x74\xdd\xe7\x69\x1e\x16\x52\xb1\x5f\x6d\x95\xc3\xfb\x47\xa9\x39\x38\x68\xda\x73\xd2\x01\x80\xe3\xd2\xcc\xe0\xa5\x3f\x27\x0f\x21\xdd\x5c\x87\x4e\xe1\xb9\xe5\xe9\xae\x99\x36\xf9\xcc\xe0\xda\xd7\xb6\xbe\xa8\xa0\xa6\xa7\x01\x3d\x40\x9d\x17\x7a\x73\x53\xdd\x77\x7a\x74\x05\xf2\xb4\x63\x62\xb1\x30\x34\xca\x9a\xf5\xec\x59\x92\x3b\x04\x02\x09\x39\xb8\x2e\x37\x4a\xbb\xcb\x16\x73\xcd\x82\xd8\x6c\x10\xcd\x97\x36\x8a\xd3\xef\x3d\x43\x26\x56\x2f\xae\xa6\x1e\x9b\xf6\xc1\xb2\x7f\x71\x35\x65\xc2\xc8\x17\x57\xd3\xe9\xfd\xf4\x03\xff\xbd\xb8\x9a\x4a\xf1\xe2\x6a\x6a\x0a\x7c\x71\x35\x7d\x71\x75\xdd\x47\xb5\x1f\xe9\xca\x4c\x4b\x86\xda\x8a\x6b\xd1\x1e\x80\x21\x6a\x85\x26\x0d\xfe\x87\x64\xb2\x36\xb3\x8c\x13\x71\x17\x2c\x9c\xbe\xb6\xf4\x70\x30\x78\xa4\x5a\x85\x8a\x68\x0b\x0a\xab\xb3\xc3\x49\xd3\x1a\xd1\x30\xd6\xb5\x52\xb2\x16\x36\x47\x82\xdd\xb5\x0b\x57\x31\xb2\x38\xb3\xa6\x99\x44\x49\xa6\xe2\xc5\x1b\x59\x6d\x43\xc7\xc4\x2d\x3f\x32\xa4\xae\xab\x4a\x2a\x13\xf5\x0d\x4a\xec\xb5\x88\xa3\x8e\x6f\xa6\xaf\x6e\x5e\x3f\xa9\xbf\xb6\x45\xb7\xdb\x44\xa7\x21\xc9\xe4\x1a\xc1\x97\xf8\x99\xbc\x07\x22\x28\x2c\x99\x42\x20\x1b\xb2\xfd\x22\x89\xa9\xbb\x90\x7d\x3a\x6e\x57\x2e\xd4\xc2\x8a\xd7\xda\x16\x24\xcc\x86\xea\x1f\x0a\xc4\xfe\x2c\x80\xef\x78\xad\x2f\xa0\xaa\x33\xce\x74\x01\x04\x04\x6e\x20\xd1\x46\x49\xb1\x5a\xb8\xd1\xdc\x5e\x58\xdd\x2b\x54\x52\x9b\x27\xe1\x80\x65\x86\x94\x9e\x00\xc4\xef\xc4\x83\x15\xe8\x7c\xf8\xff\xef\xbf\x65\x73\x3e\xfe\xa1\x7c\xd6\x1e\xda\x7f\x58\x87\x1d\x05\xf0\x66\xb3\x89\x5a\x53\xba\xe8\x2d\x90\x57\xb1\x4d\x65\xb5\x60\x66\x1b\xfb\x93\x50\x8a\xf8\x4b\x46\xd3\xab\x9b\xab\xd7\xaf\xaf\x5e\xfe\xcb\xcd\xab\x57\x57\x37\x2f\x5f\x3d\x16\xda\x1d\x2a\x7e\x7f\x64\xfb\x5b\xd1\x37\xf2\xb6\x36\x45\x77\x25\xf2\x80\x69\x4b\x71\x5b\x6f\x51\x7b\xa5\x54\xc1\xef\x06\x51\x2d\x6c\x5d\x19\x12\x7e\xb2\x24\xfc\x08\x18\x39\x1c\x3d\xa1\xd9\x27\x62\xab\xc5\x8f\x85\x8a\xac\x8d\xdd\x61\xdb\x9c\x61\x52\x74\x78\xba\x00\xcd\xca\x8a\x6f\x21\xdf\x7b\xfd\x11\x60\x3d\xea\x95\xdf\xc4\xd5\xd0\x6f\x1e\x65\xae\x98\x2b\x25\x45\x5b\xc3\xe9\x5a\xe7\x58\xb9\xb6\xbd\x2d\x8b\xfe\xb2\xfd\x95\x08\xc3\x04\xb6\xe5\x53\x04\xdf\x0a\xbe\x85\x5a\x23\x2c\xa5\x02\x8a\x59\xbd\x5a\xb9\xa2\x4f\x41\xa5\xd8\x9a\x18\x6c\x6b\x26\xdd\xc0\xa2\x43\x45\xef\xa6\x6a\x2b\x58\xde\x2b\x28\xff\x2e\x6b\xc8\x89\x00\xa3\x48\x7e\xe7\x43\xa5\x56\xca\x86\x4a\x85\x7e\x37\x5d\xd5\x96\x21\x97\x1b\x47\xe2\xf7\xbd\x64\xc8\x5d\x09\xa7\x11\xa1\x90\x1b\x28\xeb\xdc\x85\xa4\x2d\xd1\xdc\x26\x36\x84\x19\xa8\x85\x61\xdc\x1b\xd4\xd4\x4a\xd8\x82\x0f\x07\x95\xd6\xd1\x5d\x3e\xc1\x72\xf1\xae\xc0\x13\x05\x6e\x77\x0b\x07\x85\x6f\x3c\x39\x54\x4a\x1a\xcc\xad\x47\x81\xac\x08\x13\xda\x7a\xc4\xd5\x72\x58\x7e\xc0\x2d\xbd\x7b\x6a\x1e\xf6\x2d\x67\x37\x1d\xc7\xf0\x35\x97\x19\xe1\xb0\xb6\x50\xcf\xb8\xad\xce\x25\x14\xd2\x6e\xbd\x67\x2d\x6d\x88\xa9\x35\xc8\xa5\x1b\xf5\x9a\xdb\xf5\x6b\xa2\xac\x07\xb1\xac\x0c\xa4\x4d\xc3\xd4\x8e\x69\x54\xeb\xa6\x0d\x6c\x5f\x0d\x43\x35\x98\xef\xac\x9e\xc2\x4f\x3f\xcf\x9f\x35\xaa\xfc\x15\x97\x0e\x12\x16\xe0\x7e\xcb\xa6\x20\x06\x72\x85\xc4\xa0\x86\x9c\x4b\x5d\x2b\xaf\x21\x55\xb2\x02\xab\x65\xcb\xa9\xe5\x6c\x27\x2a\x27\xad\x65\x32\x2e\x88\x2e\x26\x4d\xbf\x57\xa1\xf3\x52\x37\xd7\x8e\x9f\x59\xd4\x8d\x2d\x03\x96\x4e\xe7\xc0\x92\x96\x6f\xc4\x51\xac\x4c\x31\x07\x76\x7e\xde\x11\x9f\xb1\x25\x8c\x5b\x8a\x9f\xd8\xcf\x91\xb9\x8f\xac\x14\x48\x53\xe8\x4b\x73\x02\x1b\x3e\xba\xe2\x2c\xc7\x31\xbb\x80\xcb\xc9\xbc\x9d\xcd\x14\x92\xbb\xf6\xad\xf1\xa3\xff\xcf\xfd\xdd\xcd\x87\x96\x71\xc6\x1f\xd8\xc6\xf7\x72\x34\x10\x58\x31\x6d\xa0\x56\x1c\x9a\x18\xf6\x2e\xe8\x1c\xe2\xe8\xfa\x56\x39\xc2\x65\xf3\xd0\x60\xaa\xdd\x82\x67\x13\x69\x14\x74\xfc\x6f\x3f\x7c\xfb\x4d\xa4\x8d\x62\x62\xc5\x96\xdb\xf1\x43\xad\xf8\x0c\x9e\x8f\x83\x7f\xaa\x15\x0f\x26\x3f\x4d\x7f\x8e\xd6\x84\xd7\x78\xe1\xfc\x3d\x73\x7f\x8f\xa4\x5c\x40\xf3\x38\x83\xa1\xc0\xdd\x64\x32\x3f\xdd\xf7\xea\xb5\xe9\x14\x6a\x34\x63\x4b\xd8\x01\xff\xd0\x46\x04\x4a\x34\x85\x74\xa1\xab\x30\x97\x42\x60\x6e\xa0\xae\xa4\x68\x4c\x02\x5c\x6a\xbd\x07\x62\x4b\x91\x1e\x83\xa2\xa1\x4f\x5d\xba\xfe\x2f\xcc\x7e\x90\xf9\x1d\x9a\xf1\x78\xbc\x61\x82\xca\x4d\xc4\xa5\x3f\x6b\x23\x1b\xa4\x32\x97\x1c\xd2\x34\x85\x26\x8d\x06\x13\xf8\x12\x82\x8d\xb6\x09\x35\x80\x99\x7d\xb4\x4f\x13\x38\x87\xc3\xe5\x85\xcd\xf8\xe7\x10\xc4\xa4\x62\xc1\xc4\x87\x43\x6b\x78\x29\x4a\xd4\x9a\xac\xb0\xaf\xa0\xbb\xe7\x76\x20\xb3\xfb\x28\xf5\x0a\x52\x70\x0e\xaa\x88\xd2\xe8\x49\x22\x4a\x0c\x69\xd1\x66\x31\xeb\xc8\xd2\x14\x44\xcd\xf9\x1e\xa4\x3e\x28\xe6\x2d\xfc\x06\xe4\x91\x4f\x36\x5f\xa4\x29\xd4\x82\x3a\x13\xd3\xfd\x4a\xeb\x7c\xdf\x14\x99\x44\x36\x2f\xec\x57\x4c\xe6\x7d\x34\x0f\xb8\x21\xfd\x2d\x76\x48\x0f\xf9\x21\x7d\x84\xa1\xeb\x41\x3d\xc5\xcf\xf7\xac\x7a\xec\xdc\xc0\x23\xdc\x44\x5d\x66\xa8\x9e\x62\xe7\x7b\x50\x0d\x3b\x67\xea\xb7\xc2\xf4\xd6\x5e\xc0\xe5\xeb\xc9\x23\xdc\x51\x29\xf9\x28\x73\x21\xcd\x76\xfc\xc0\xc9\xd6\x16\x4d\x30\x32\xb2\x7a\xe3\x3a\x46\xa3\x0b\x97\x71\x67\xd0\x71\xb8\x70\x1f\x03\x66\x30\x72\x6f\x76\x9e\x95\xe8\x56\xbd\x9a\x4e\xa7\x17\xd0\x7e\x46\xfb\x0b\xb1\x41\xa8\x6a\xdc\x3d\xa2\x8f\xae\xf3\xdc\xe6\xfd\x4f\xd1\xa8\xe1\xd1\xe9\xd4\xbc\x7f\x82\x56\x5d\x6e\x18\xa8\x05\x7f\xfa\x13\x1c\xcd\x0e\x61\x1c\xc7\xf0\x1f\x44\xdd\xb9\xf6\x4e\xa5\x70\xed\x5a\x40\x1d\x7d\xc9\xb4\x76\x9d\x15\x0d\x54\x0a\x6c\xd6\x7c\xdc\xb1\x7f\xa4\x63\x43\x06\x0b\x98\x1e\x2a\x68\x8f\xc3\x5e\x5a\x38\x91\x2d\x7a\x7c\x87\x89\xe0\x6c\xd7\x97\x37\x58\xc9\x4a\x84\x2f\x52\x08\x82\xfe\xe2\x23\x0a\x4b\xd0\x31\x3b\xd3\x68\xde\x79\x5f\x8c\x9b\xec\x78\x2a\x77\x4d\x2e\xe0\x7a\x3a\x9d\x4e\x8e\x94\xd8\xed\xcd\x7b\x5b\xd9\xb2\x09\x88\xd8\xba\x23\xb1\xb3\xad\x2b\x1c\x6d\x09\x64\x8f\x34\x0e\xb9\xe4\xdc\xd7\x2c\xcd\x52\x6b\xe0\xa6\x13\x96\x42\x78\x39\x3f\x91\x45\x7b\x96\xec\x6d\xed\xd0\x3d\x27\x6c\x7f\xe8\xa2\xa1\xcd\x0e\x88\xc3\xcb\x81\x53\x06\xfe\x3a\xed\x98\xb3\x4e\x6f\xb6\xb7\xe8\x81\xbb\xf6\xfe\x3a\xb4\x59\x4f\x7f\xcf\xe7\xfc\xf2\x03\xb7\xd1\x4d\x57\xb5\x2e\xc6\x07\x8a\x4e\xe6\xc7\xbe\x79\x6b\x50\xd9\x2a\x59\xda\x94\x65\x7d\x61\xef\x02\x0a\x8f\x5c\xe2\x4a\x75\x85\xa1\x42\x41\x51\xb5\x25\x85\xaf\xec\x6d\x01\x38\x70\x99\xbf\x56\xf6\xe1\xf4\x91\x01\xe3\x4a\x32\x29\x10\x00\xe0\x20\x08\x1c\x50\x07\x48\xb5\xc4\xc8\x49\xa5\x91\x42\x0a\xfe\x57\x0d\xe3\x49\x54\x0b\x76\x3f\x9e\x84\xcd\xfb\x21\x8f\x76\x7e\xde\xdd\x13\x5b\xb5\xcf\x53\x08\x12\xa3\x80\xd1\x74\x14\xc0\xf9\xa9\x10\xb4\x59\x77\xb4\xd8\x6b\xd0\x5f\x0a\x90\x18\xba\x70\x6d\x6d\x7f\x61\xfb\x47\x90\x91\xfc\x6e\xe5\x2e\x42\x33\x5b\x6a\x8d\x8f\xd8\x92\x35\x31\x44\x39\xae\x93\x39\xec\xc9\x9b\x9b\x62\x6e\x9d\x33\x07\x7f\x25\x75\xdd\x73\xe8\x3e\x39\xb9\xb7\x4c\x2a\x8a\x2a\x54\x84\xb2\x5a\xcf\xe0\x65\x75\x3f\xff\x47\xfb\x49\xce\xf5\xf8\x9f\x54\xb5\x52\xb8\x38\xd2\xa8\xe9\x14\x9f\x43\x90\xc4\x96\xe0\xb7\xd8\x74\x9b\xed\xff\x9a\x02\x4e\x7c\xc9\x80\xee\xb7\x0e\xcd\x78\xc9\x28\xe5\x68\x15\xde\xb3\xb7\xc1\x68\xfd\xdf\x0f\xa9\xa1\x48\x68\x3e\x61\xec\xd7\xec\x00\xb9\xc6\x27\x16\x74\x5f\x43\x46\x16\x00\xa1\xdd\x32\x73\x36\x6f\x6e\xdb\x6e\x58\x8d\x9c\x2d\x9a\xdf\xc6\xd0\x5a\xb9\x5a\x6b\x1c\x36\x00\xbb\x80\x91\xb6\xb5\x1f\xd5\xa3\x49\x54\xd4\x25\x11\xec\x57\x1c\xdb\xbc\x34\xf1\xb6\x72\x9f\x57\x82\xe3\x23\xf9\x48\x99\xfd\x77\x8f\x51\x9b\xe3\x46\x8d\x11\x47\xad\x77\x5f\xee\x2f\xf7\x33\x98\xce\x47\x1f\x69\xa1\xd3\x52\xc2\x8c\x28\xe8\xbf\x84\x6d\xf2\x05\x25\xad\xf4\x76\x2e\x23\x6a\xe4\x5b\x19\xae\x3e\x17\x72\x93\x8e\xae\xa7\x9d\x92\xde\xd1\xce\xcf\xa3\x06\x6b\x47\xce\xb0\x5a\xb6\xa1\xb9\x80\xeb\xe9\xe7\xd0\xd6\xb7\x43\x0e\x76\x60\x14\xab\x90\x02\xc9\x0d\x5b\xe3\xff\xc1\x46\x3e\x83\x91\x3f\x5a\x45\x8b\xc3\xd6\x78\x0e\xa6\x03\x7d\xed\x6c\x67\xdb\x7f\xb6\xf1\x06\xb1\xb3\xf0\x39\x04\x27\x37\xf2\x28\x12\x0f\x08\x0f\x42\xfb\xf1\xb8\x77\xdf\x0b\x83\xc3\x9c\x62\xab\xdd\xee\x63\xf7\x24\x2a\x4c\xc9\xc7\x41\x62\xdc\xaf\x9e\xac\xce\x1d\x07\xc7\xc0\x0f\x0f\x4b\xba\xdd\xf0\x22\x63\xef\xef\x78\x70\xcf\x82\x5e\x71\xd2\xdd\xc5\xda\x4a\x04\x76\xfb\x1f\x87\xc5\x31\xfc\x60\x88\x32\x40\xe0\xc7\xb7\x50\x57\x94\x18\xff\x5d\xce\xe6\x47\xdf\x77\x6e\x7f\x3d\x96\x11\xa5\x61\x29\xd5\x86\x28\xda\xf4\x67\x4c\x81\x5b\xf7\x5d\xae\x2d\xfd\x34\x9a\xb7\xf6\x14\x5b\x13\x3e\x3e\xba\xf7\x3d\x1f\x8f\xa2\xbe\xcb\x47\x93\x08\x49\x5e\x1c\x13\xba\x8c\xd5\xc9\x4d\xe1\x1b\x77\x05\x18\x3f\x1f\x9b\x82\xe9\x49\x44\x8c\x51\xe3\xd1\x00\x0c\xa3\x89\xf5\xeb\x65\xef\x4a\xd6\x2d\x4f\x06\x61\xf5\x14\x8f\x7d\x31\xdd\x15\x02\x2d\x79\xae\xf5\xd8\xe3\x6a\x74\xd1\xe3\x3d\x84\xd5\xe8\xc5\xa8\x73\xd4\x3e\xbc\xf7\xfb\x48\x4f\x6a\x32\x60\x3d\xb2\x51\x36\x3a\x12\x4f\x28\x7d\x63\xe3\x67\x1c\x9c\x88\xf4\x43\x74\x4c\x3a\x63\xfb\xf3\xfa\x49\x2b\xfb\x9f\xd9\x3c\x62\x62\x46\x47\x93\x48\xd7\x99\xef\x4d\x8c\x5f\x75\x17\xb0\x96\xcc\x81\xf7\x30\x15\x1c\x15\x14\x56\xc4\xb0\xa8\x08\x0f\x8a\x90\x27\xb2\x46\x23\xd2\xef\x6a\x77\x61\x0d\x3e\x9d\x74\xad\xad\xaf\xb4\x2d\xae\x7c\xf3\x7f\x83\x99\x76\x9d\x04\x68\xf0\xee\xba\x39\xbe\x6b\x73\xfb\xdd\xdb\x5e\xe7\xa6\x8b\x88\xb1\xe3\xde\xfd\xb0\xf3\x54\x9f\xe4\xe4\x2f\x49\x37\x9b\x4d\xe4\x3f\x6a\xb9\x3e\x7e\xd7\x48\x89\x49\xc5\xa2\xf7\x3a\x00\xa2\xb7\x22\x07\x8a\x4b\x54\x8b\x1e\xfb\xa6\xbb\x92\xc4\xfe\x37\x8e\x49\xec\x7f\xc6\xfd\xbf\x01\x00\x00\xff\xff\xd7\x1d\xc3\xf2\xd7\x2d\x00\x00")

func faucetHtmlBytes() ([]byte, error) {
	return bindataRead(
		_faucetHtml,
		"faucet.html",
	)
}

func faucetHtml() (*asset, error) {
	bytes, err := faucetHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "faucet.html", size: 11735, mode: os.FileMode(420), modTime: time.Unix(1521016146, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xab, 0x32, 0x4b, 0xa7, 0xf5, 0x8f, 0x4a, 0x94, 0x94, 0x34, 0x9b, 0x6f, 0x13, 0x87, 0x43, 0xd1, 0x7, 0x78, 0x5, 0x78, 0xc1, 0x3a, 0x8, 0xf0, 0x71, 0xb8, 0xe3, 0xbe, 0xef, 0x4b, 0x58, 0x81}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"faucet.html": faucetHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"faucet.html": {faucetHtml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
